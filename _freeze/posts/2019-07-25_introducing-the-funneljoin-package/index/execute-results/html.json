{
  "hash": "b98ea8a3a4f89240c873948874e5e87a",
  "result": {
    "markdown": "---\ntitle: \"Introducing the funneljoin package\"\ndate: '2019-08-01'\nslug: introducing-the-funneljoin-package\ncategories: [R, Code]\ndescription: How our new R package funneljoin makes it easy to analyze sequence of events.\nimage: \"/img/domino-unsplash.jpg\"\n---\n\n\n<!-- \ncover img: https://unsplash.com/photos/pxVOztBa6mY\nartist: Bradyn Trollip\nlicence: unsplash free-to-use \n-->\n \nBradyn Trollip\nHave you ever had a \"first this then that\" question? For example, maybe you're an e-commerce business and you want all the times people clicked on an item and then added it to their cart within 2 days, or the last page they visited before registering. Or [you work with pharmaceutical data](https://twitter.com/scottishnp/status/1154657704578695168?s=20) and need to know what drugs people took before drug x and which drugs they took afterward and when. Or you [tag fish](https://twitter.com/Voovarb/status/1154445792125394945?s=20) and need to know where they went and if they eventually migrated upstream. \n\nEnter the [funneljoin package](https://github.com/robinsones/funneljoin). The goal of funneljoin is to make it easy to analyze behavior funnels with the `after_join()`,  `funnel_start()`, and `funnel_step()` functions. If you work with data where you have events with their time and associated user, you probably have a problem funneljoin can help with. I created this package with [David Robinson](https://twitter.com/drob) and [Anthony Baker](https://www.linkedin.com/in/awbaker1/) in July 2018 and have continued to maintain and build on it since. \n\nIn this post, I'll use `funneljoin::after_join()` to analyze data about all Stack Overflow questions and answers with the tag R up to September 24th, 2017. The data was downloaded from Kaggle [here](https://www.kaggle.com/stackoverflow/rquestions). The next post in this series will look at the `funnel_start()` and `funnel_step()` functions, which we'll use when all of the events or behavior are in one table. \n\n## Set-up\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n\nanswers <- read_csv(\"Answers.csv\")\nquestions <- read_csv(\"Questions.csv\")\n```\n:::\n\n\n`funneljoin` is on CRAN, so you can install it as you would any CRAN package. \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# install.packages(\"funneljoin\")\nlibrary(funneljoin)\n```\n:::\n\n::: {.cell}\n\n:::\n\n\nLet's take a quick look at the questions and answers data set. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nquestions\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 189,930 × 6\n       Id OwnerUserId CreationDate        Score Title                      Body \n    <dbl>       <dbl> <dttm>              <dbl> <chr>                      <chr>\n 1  77434       14008 2008-09-16 21:40:29   171 How to access the last va… \"<p>…\n 2  79709          NA 2008-09-17 03:39:16     3 Worse sin: side effects o… \"<p>…\n 3  95007       15842 2008-09-18 17:59:19    56 Explain the quantile() fu… \"<p>…\n 4 103312          NA 2008-09-19 16:09:26     4 How to test for the EOF f… \"<p>…\n 5 255697     1941213 2008-11-01 15:48:30     4 Is there an R package for… \"<p>…\n 6 359438        2173 2008-12-11 14:02:06     4 Optimization packages for… \"<p>…\n 7 439526       37751 2009-01-13 15:58:48    23 Thinking in Vectors with R \"<p>…\n 8 445059       37751 2009-01-14 23:09:02    12 Vectorize my thinking: Ve… \"<p>…\n 9 467110       11301 2009-01-21 21:33:13     5 Is R a compiled language?  \"<p>…\n10 476726         277 2009-01-24 21:56:23    10 Filtering data in R        \"<p>…\n# … with 189,920 more rows\n# ℹ Use `print(n = ...)` to see more rows\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nanswers \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 250,788 × 7\n      Id OwnerUserId CreationDate        ParentId Score IsAcceptedAnswer Body   \n   <dbl>       <dbl> <dttm>                 <dbl> <dbl> <lgl>            <chr>  \n 1 79741        3259 2008-09-17 03:43:22    79709    -1 FALSE            \"<p>It…\n 2 79768        6043 2008-09-17 03:48:29    79709     9 FALSE            \"<p>us…\n 3 79779        8002 2008-09-17 03:49:36    79709     0 FALSE            \"<p>Th…\n 4 79788          NA 2008-09-17 03:51:30    79709     4 FALSE            \"<p>It…\n 5 79827       14257 2008-09-17 03:58:26    79709     1 FALSE            \"<p>I'…\n 6 79893       14928 2008-09-17 04:11:08    79709     6 FALSE            \"<p>Re…\n 7 83162       15842 2008-09-17 13:27:17    77434    70 FALSE            \"<p>If…\n 8 83222        1428 2008-09-17 13:32:45    77434   236 FALSE            \"<p>I …\n 9 86804          NA 2008-09-17 19:39:37    79709     1 FALSE            \"<p>FY…\n10 95598        1179 2008-09-18 18:49:09    95007     5 FALSE            \"<p>Th…\n# … with 250,778 more rows\n# ℹ Use `print(n = ...)` to see more rows\n```\n:::\n:::\n\n\nBefore I dive into the analysis, I'm going to use the janitor's package `clean_names()` function to convert the column names to snake case. I'll also get rid of the rows where user id is missing. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nquestions <- questions %>%\n  janitor::clean_names() %>%\n  filter(!is.na(owner_user_id))\n\nanswers <- answers %>%\n  janitor::clean_names() %>%\n  filter(!is.na(owner_user_id))\n```\n:::\n\n\n## after_join() \n\nLet's start with a relatively simple question - how many people who ask a question later answer one? To look at this, we'll need to link the questions with the answers table using `owner_user_id` and `creation_date` using funneljoin's `after_join` function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfirst_answer_after_first_question <- questions %>%\n  after_left_join(answers,\n             by_time = \"creation_date\",\n             by_user = \"owner_user_id\",\n             type = \"first-firstafter\", \n             suffix = c(\"_question\", \"_answer\")) \n\nfirst_answer_after_first_question\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 60,335 × 12\n   id_question owner_user_id creation_date_quest…¹ score…² title body_…³ id_an…⁴\n         <dbl>         <dbl> <dttm>                  <dbl> <chr> <chr>     <dbl>\n 1       77434         14008 2008-09-16 21:40:29       171 How … \"<p>Su…      NA\n 2       95007         15842 2008-09-18 17:59:19        56 Expl… \"<p>I'… 4249121\n 3      255697       1941213 2008-11-01 15:48:30         4 Is t… \"<p>I'…      NA\n 4      359438          2173 2008-12-11 14:02:06         4 Opti… \"<p>Do…      NA\n 5      439526         37751 2009-01-13 15:58:48        23 Thin… \"<p>I …  440066\n 6      467110         11301 2009-01-21 21:33:13         5 Is R… \"<p>I …      NA\n 7      476726           277 2009-01-24 21:56:23        10 Filt… \"<p>I … 4727309\n 8      495744         12677 2009-01-30 14:48:19         2 Oper… \"<p>I … 2203628\n 9      498932           445 2009-01-31 14:50:28         3 What… \"<p>I …  511763\n10      520810         63372 2009-02-06 15:49:48        20 Does… \"<p>An…      NA\n# … with 60,325 more rows, 5 more variables: creation_date_answer <dttm>,\n#   parent_id <dbl>, score_answer <dbl>, is_accepted_answer <lgl>,\n#   body_answer <chr>, and abbreviated variable names ¹​creation_date_question,\n#   ²​score_question, ³​body_question, ⁴​id_answer\n# ℹ Use `print(n = ...)` to see more rows, and `colnames()` to see all variable names\n```\n:::\n:::\n\n\nThe first two arguments are the tables we're joining, with the first table being the events that happen first. We then specify:\n\n-   `by_time`: the time columns in each table. This would typically be a datetime or a date column. These columns are used to filter for time y being after time x.\n-   `by_user`: the user or identity columns in each table. These must always be identical for a pair of rows to match.\n-   `type`: the type of funnel used to distinguish between event pairs, such as \"first-firstafter\", first-first\", \"last-first\", \"any-firstafter\". \n-   `suffix`: just like dplyr's join functions, this specifies what should be appended to the names of columns that are in both tables.\n\nThe `type` argument is the most powerful one, as it allows you to switch between types of funnels easily. In this case, we wanted only the first question someone asked and then wanted to know the first answer they gave afterward. \n\nFor **any** `type` of `after_join()`, the timestamps of the second table (in this case answers) will always be after the timestamp of the first table for each user - we can see there are no rows where `creation_date_answer` is before `creation_date_question`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfirst_answer_after_first_question %>%\n  filter(creation_date_answer < creation_date_question)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 0 × 12\n# … with 12 variables: id_question <dbl>, owner_user_id <dbl>,\n#   creation_date_question <dttm>, score_question <dbl>, title <chr>,\n#   body_question <chr>, id_answer <dbl>, creation_date_answer <dttm>,\n#   parent_id <dbl>, score_answer <dbl>, is_accepted_answer <lgl>,\n#   body_answer <chr>\n# ℹ Use `colnames()` to see all variable names\n```\n:::\n:::\n\n\nTo answer our original question, let's get a count by what percent of rows don't have an `id_answer`, meaning they never answered a question after asking one. We'll use the funneljoin's `summarize_conversions()` function, where you specify what column indicates whether someone \"converted\" (in this case answered a question) and returns the total number of users (`nb_users`), the number of conversions (`nb_conversions`), and the percent converted (`pct_converted`). \n\n\n::: {.cell}\n\n```{.r .cell-code}\nfirst_answer_after_first_question %>%\n  summarize_conversions(converted = id_answer)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 3\n  nb_users nb_conversions pct_converted\n     <int>          <int>         <dbl>\n1    60335          13688         0.227\n```\n:::\n:::\n\n\nWe see that of the approximately 60,000 users that asked an R question, 22.7% percent later went on to answer one. \n\nHow long does it take for people to answer their first question? We can add `gap_col = TRUE` to `after_join()` to add a column, `.gap`, which is the gap between events (in seconds). \n\n\n::: {.cell}\n\n```{.r .cell-code}\ntime_between_first_question_and_answer <- questions %>%\n  after_left_join(answers,\n                  by_time = \"creation_date\",\n                  by_user = \"owner_user_id\",\n                  type = \"first-firstafter\",\n                  gap_col = TRUE) %>%\n  mutate(gap_hours = .gap  / 3600)\n\ntime_between_first_question_and_answer %>%\n  ggplot(aes(x = gap_hours)) + \n  geom_histogram() + \n  scale_x_log10(breaks = c(1, 24, 24 * 7, 24 * 7 * 30), \n                     labels = c(\"1 hour\", \"1 day\", \"1 week\", \"1 month\")) + \n  labs(x = \"Time between asking the first question and answering one\",\n       y = \"Number of users\",\n       title = \"What's the gap between asking your first question and answering one?\",\n       subtitle = \"Only for questions tagged with R on Stack Overflow\") \n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-11-1.png){width=921.6}\n:::\n:::\n\n\nWe can get an idea from this graph what percentage of people who ask a question answer one within a week, or we could filter our data to get an exact answer. To make it even easier though, we can use the `max_gap` argument in `after_join()` to specify that someone needs to have answered a question within a week from their data to be joined. `max_gap` takes either a `difftime` or an integer representing the gap in seconds and will filter so that the time between events is less than or equal to that `max_gap`. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nquestions %>%\n  after_join(answers,\n             by_time = \"creation_date\",\n             by_user = \"owner_user_id\",\n             type = \"first-firstafter\",\n             mode = \"left\",\n             suffix = c(\"_question\", \"_answer\"),\n             max_gap = as.difftime(1, units = \"weeks\")) %>%\n  summarize_conversions(converted = id_answer)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 3\n  nb_users nb_conversions pct_converted\n     <int>          <int>         <dbl>\n1    60335           5349        0.0887\n```\n:::\n:::\n\n\nNow we see that only 8.9% answer an R question within a week of asking their first one. \n\nWe might be curious if the likelihood of answering a question later varies by the score of the question they asked. Before doing summarize_conversions, we can group by the score. There are some scores that only appear once (e.g. one person got a score of -18), so we'll filter for only scores between -4 and 10.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfirst_answer_after_first_question %>%\n  group_by(score_question) %>%\n  summarize_conversions(converted = id_answer) %>%\n  filter(between(score_question, -4, 10)) %>%\n  ggplot(aes(x = score_question, y = pct_converted)) + \n  geom_line() + \n  geom_point(aes(size = nb_users)) + \n  scale_y_continuous(labels = scales::percent) + \n  labs(y = \"% who later answer a question\",\n      x = \"Score on a user's first question\",\n      title = \"If your first question is scored highly, you're more to answer a question later\",\n      subtitle = \"Only for questions tagged with R on Stack Overflow\",\n      size = \"Number of users\") + \n  expand_limits(y = 0)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-13-1.png){width=921.6}\n:::\n:::\n\n\nMost people's first questions have a score between -1 and 4, but for those who manage to score higher, they're more likely to answer a question later. As always, you have to be careful of any claims of causality: it's likely be those who are asking higher scored questions are better at R and thus have the knowledge to later provide answers. \n\n## Other joins and funnel types\n\nWe've been looking so far at people's answers after they've asked a question. But are there people who answer a question before they ever ask one? \n\nWe can examine this by changing the join to:\n\n-   `first-first` type to filter both tables to the first instance of a user (e.g. their first answer and their first question).\n-   `after_right_join` to keep everyone who asks a question, whether or not they ever answered any before.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nanswers %>%\n  after_right_join(questions,\n           by_time = \"creation_date\",\n           by_user = \"owner_user_id\",\n           type = \"first-first\",\n           suffix = c(\"_answer\", \"_question\")) %>%\n  summarize_conversions(converted = id_answer)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 3\n  nb_users nb_conversions pct_converted\n     <int>          <int>         <dbl>\n1    60335           2795        0.0463\n```\n:::\n:::\n\n\nYes, 4.63% of people have answered a question before they asked their first one. \n\nFor people who answer questions after asking one, let's find out how many they answer. We'll switch our query to an `after_inner_join` with a type `first-any`. Each user will only have one question, their first, as we used a `first-Y` type. But it has one row per answer they gave afterwards as we used a `X-any` type. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nquestions %>%\n  after_inner_join(answers,\n           by_time = \"creation_date\",\n           by_user = \"owner_user_id\",\n           type = \"first-any\") %>%\n  count(owner_user_id) %>%\n  ggplot(aes(n)) + \n  geom_histogram() + \n  scale_x_log10() + \n  labs(x = \"Number of answers\",\n       y = \"Number of users\",\n       title = \"How many questions do people answer after asking their first one?\",\n       subtitle = \"Only for questions tagged with R on Stack Overflow and people who answer at least one afterwards\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-15-1.png){width=921.6}\n:::\n:::\n\n\nNot surprisingly, we see people mostly answer only 1 or 2 questions, with a long tail of power users answering 100+ questions. \n\n## Conclusion \n\nSome of the power of `funneljoin` comes from making it possible to code things you didn't know how to before. But a lot of it comes from bringing things from \"possible but time-consuming and error-prone\" to \"easy.\" When you're doing exploratory analysis, you want to be able to iterate quickly between ideas: switching from the first thing someone added to their cart after searching for an item, to everything they added, to only items they added within a week. \n\nIn the next post, I'll be sharing `funneljoin`'s other main functions: `funnel_start()` and `funnel_step()`. In the meantime, if you find any bugs or have a feature request or question, please create an issue on [GitHub](https://github.com/robinsones/funneljoin) or get in touch on [Twitter](https://twitter.com/robinson_es)!",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}